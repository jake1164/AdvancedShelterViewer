@page "/"
@using AdvancedShelterViewer.Shared.Services
@inject IFormFactor FormFactor
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<h1>Advanced Fallout Shelter Viewer</h1>
<div class="instructions">
    <p>Large Files can take more time to load!</p>
    Drag a save file here (e.g. Vault1.sav) <br />
    or select one here: <br />
    <input type="file" @ref="fileInput" @onchange="LoadFile" />
    <br /><br /><br />
    For PC/Launcher Version the save is in:<br /> "Documents\My Games\Fallout Shelter"
    <br />
    For Windows 10 Store version check this: <a href="https://bethesda.net/community/topic/25405/transfer-vault-from-desktop-version-to-play-anywhere">
        Click
        Here
    </a>
    <br />
    For Steam Version the save is in:<br /> "C:\Users\YOURUSERNAME\AppData\Local\FalloutShelter"
    <br />
    For Android Version the Save is in:<br /> "storage/sdcard/Android/data/com.bethsoft.falloutshelter/files"
</div>

@code {
    private ElementReference fileInput;
    private async void LoadFile()
    {
        // Using MAUI we should set the default path based on the OS?        

        // Note this does not work in web?
        //var hs = await JS.InvokeAsync<string>("readFileAsBase64_hs", fileInput);
        //Console.WriteLine(hs);
        var content = await JS.InvokeAsync<string>("readFileAsBase64", fileInput);

        //var content2 = await JS.InvokeAsync<string>("shelter.readFileAsBase642", fileInput);

        Console.WriteLine(content);

        var jsonString = await JS.InvokeAsync<string>("shelter.decryptString", content);
        Console.WriteLine(jsonString);
    }
     
}
<!--
<script>
    window.readFileAsBase64_hs = (fileInput) => {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onerror = () => {
                reader.abort();
                reject(new Error("Error reading file."));
            };
            reader.onload = () => {
                resolve(reader.result);
            };
            reader.readAsText(fileInput.files[0]);
        });
    };
</script>-->
<!--
<script>
    window.decryptString = (base64String) => {
        return new Promise((resolve, reject) => {
            var cipherBits = sjcl.codec.base64.toBits(base64Str);
            var prp = new sjcl.cipher.aes(key);
            var plainBits = sjcl.mode.cbc.decrypt(prp, cipherBits, iv);
            var jsonStr = sjcl.codec.utf8String.fromBits(plainBits);
            try {
                console.log(JSON.parse(jsonStr));
                resolve(JSON.parse(jsonStr));
            } catch (e) {
                reject(new Error("Error Decrypting String"));
            }
        };

    };
</script>-->
